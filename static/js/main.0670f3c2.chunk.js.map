{"version":3,"sources":["Synth/Synth.js","App.js","serviceWorker.js","index.js"],"names":["Synth","props","state","naturalNotes","sharpNotes","duration","oscillator","Tone","toMaster","this","map","naturalNote","push","className","onClick","triggerAttackRelease","sharpNote","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAIqBA,G,kBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,aAAc,CACV,KAAM,KAAM,KACZ,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KACZ,KAAM,KAAM,KAAM,KAClB,MAEJC,WAAY,CACR,MAAO,MAAO,MACd,MAAO,MACP,MAAO,MAAO,MACd,MAAO,OAEXC,SAAU,GACVC,YAAY,IAAIC,IAAKP,OAAQQ,YAjBlB,E,sEAsBT,IAAD,OAEDL,EAAe,GACnBM,KAAKP,MAAMC,aAAaO,KAAI,SAACC,GACzBR,EAAaS,KACT,yBAAKC,UAAS,uBAA0BC,QAAS,WAC7C,EAAKZ,MAAMI,WAAWS,qBAAqBJ,EAAa,EAAKT,MAAMG,iBAK/E,IAAID,EAAa,GAmBjB,OAlBAK,KAAKP,MAAME,WAAWM,KAAI,SAACM,GACvBZ,EAAWQ,KACP,yBAAKC,UAAS,6BAEQ,QAAdG,GACc,QAAdA,GACc,QAAdA,GACc,QAAdA,EAEO,gCAEJ,IACHF,QAAS,WACb,EAAKZ,MAAMI,WAAWS,qBAAqBC,EAAW,EAAKd,MAAMG,iBAMzE,yBAAKQ,UAAU,SACX,yBAAKA,UAAU,yBACVV,GAEL,yBAAKU,UAAU,uBACVT,Q,GA5Dca,cCAdC,E,YAEnB,WAAYjB,GAAQ,qEACZA,I,sEAKN,OACE,yBAAKY,UAAU,QACb,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,aAAb,yBACA,kBAAC,EAAD,Y,GAZuBI,aCQbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0670f3c2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Tone from \"tone\";\r\nimport './Synth.scss'\r\n\r\nexport default class Synth extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            naturalNotes: [\r\n                \"C3\", \"D3\", \"E3\",\r\n                \"F3\", \"G3\", \"A3\", \"B3\",\r\n                \"C4\", \"D4\", \"E4\",\r\n                \"F4\", \"G4\", \"A4\", \"B4\",\r\n                \"C5\"\r\n            ],\r\n            sharpNotes: [\r\n                \"C#3\", \"D#3\", \"F#3\",\r\n                \"G#3\", \"A#3\",\r\n                \"C#4\", \"D#4\", \"F#4\",\r\n                \"G#4\", \"A#4\",\r\n            ],\r\n            duration: 0.2,\r\n            oscillator: new Tone.Synth().toMaster()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let naturalNotes = [];\r\n        this.state.naturalNotes.map((naturalNote) => {\r\n            naturalNotes.push(\r\n                <div className={`synth__natural__note`} onClick={() => {\r\n                    this.state.oscillator.triggerAttackRelease(naturalNote, this.state.duration)\r\n                }} />\r\n            )\r\n        })\r\n\r\n        let sharpNotes = [];\r\n        this.state.sharpNotes.map((sharpNote) => {\r\n            sharpNotes.push(\r\n                <div className={`synth__sharp__note ${(() => {\r\n                    if (\r\n                        sharpNote === \"D#3\" ||\r\n                        sharpNote === \"A#3\" ||\r\n                        sharpNote === \"D#4\" ||\r\n                        sharpNote === \"A#4\"\r\n                    ) {\r\n                        return \"synth__sharp__note--separator\"\r\n                    }\r\n                    return \"\"\r\n                })()}`} onClick={() => {\r\n                    this.state.oscillator.triggerAttackRelease(sharpNote, this.state.duration)\r\n                }} />\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"synth\">\r\n                <div className=\"synth__natural__notes\">\r\n                    {naturalNotes}\r\n                </div>\r\n                <div className=\"synth__sharp__notes\">\r\n                    {sharpNotes}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './assets/style/main.scss';\r\nimport Synth from './Synth/Synth';\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"main-container\">\r\n          <p className=\"app-title\">Ericson's Fancy Synth</p>\r\n          <Synth/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}