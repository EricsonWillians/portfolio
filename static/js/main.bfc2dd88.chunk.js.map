{"version":3,"sources":["Synth/Synth.js","App.js","serviceWorker.js","index.js"],"names":["Synth","props","state","naturalNotes","sharpNotes","duration","oscillator","Tone","toMaster","this","map","naturalNote","push","className","onClick","triggerAttackRelease","sharpNote","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAIqBA,G,kBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,aAAc,CACV,KAAM,KAAM,KACZ,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KACZ,KAAM,KAAM,KAAM,KAClB,MAEJC,WAAY,CACR,MAAO,MAAO,MACd,MAAO,MACP,MAAO,MAAO,MACd,MAAO,OAEXC,SAAU,GACVC,YAAY,IAAIC,IAAKP,OAAQQ,YAjBlB,E,sEAsBT,IAAD,OAEDL,EAAe,GACnBM,KAAKP,MAAMC,aAAaO,KAAI,SAACC,GACzBR,EAAaS,KACT,yBAAKC,UAAS,uBAA0BC,QAAS,WAC7C,EAAKZ,MAAMI,WAAWS,qBAAqBJ,EAAa,EAAKT,MAAMG,iBAK/E,IAAID,EAAa,GAmBjB,OAlBAK,KAAKP,MAAME,WAAWM,KAAI,SAACM,GACvBZ,EAAWQ,KACP,yBAAKC,UAAS,6BAEQ,QAAdG,GACc,QAAdA,GACc,QAAdA,GACc,QAAdA,EAEO,gCAEJ,IACHF,QAAS,WACb,EAAKZ,MAAMI,WAAWS,qBAAqBC,EAAW,EAAKd,MAAMG,iBAMzE,yBAAKQ,UAAU,SACX,yBAAKA,UAAU,yBACVV,GAEL,yBAAKU,UAAU,uBACVT,Q,GA5Dca,cCAdC,E,YAEnB,WAAYjB,GAAQ,qEACZA,I,sEAKN,OACE,yBAAKY,UAAU,QACb,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,aAAb,yBACA,kBAAC,EAAD,Y,GAZuBI,aCQbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bfc2dd88.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Tone from \"tone\";\r\nimport './Synth.scss'\r\n\r\nexport default class Synth extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            naturalNotes: [\r\n                \"C3\", \"D3\", \"E3\",\r\n                \"F3\", \"G3\", \"A3\", \"B3\",\r\n                \"C4\", \"D4\", \"E4\",\r\n                \"F4\", \"G4\", \"A4\", \"B4\",\r\n                \"C5\"\r\n            ],\r\n            sharpNotes: [\r\n                \"C#3\", \"D#3\", \"F#3\",\r\n                \"G#3\", \"A#3\",\r\n                \"C#4\", \"D#4\", \"F#4\",\r\n                \"G#4\", \"A#4\",\r\n            ],\r\n            duration: 0.2,\r\n            oscillator: new Tone.Synth().toMaster()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let naturalNotes = [];\r\n        this.state.naturalNotes.map((naturalNote) => {\r\n            naturalNotes.push(\r\n                <div className={`synth__natural__note`} onClick={() => {\r\n                    this.state.oscillator.triggerAttackRelease(naturalNote, this.state.duration)\r\n                }} />\r\n            )\r\n        })\r\n\r\n        let sharpNotes = [];\r\n        this.state.sharpNotes.map((sharpNote) => {\r\n            sharpNotes.push(\r\n                <div className={`synth__sharp__note ${(() => {\r\n                    if (\r\n                        sharpNote === \"D#3\" ||\r\n                        sharpNote === \"A#3\" ||\r\n                        sharpNote === \"D#4\" ||\r\n                        sharpNote === \"A#4\"\r\n                    ) {\r\n                        return \"synth__sharp__note--separator\"\r\n                    }\r\n                    return \"\"\r\n                })()}`} onClick={() => {\r\n                    this.state.oscillator.triggerAttackRelease(sharpNote, this.state.duration)\r\n                }} />\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"synth\">\r\n                <div className=\"synth__natural__notes\">\r\n                    {naturalNotes}\r\n                </div>\r\n                <div className=\"synth__sharp__notes\">\r\n                    {sharpNotes}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './assets/style/main.scss';\nimport Synth from './Synth/Synth';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"main-container\">\n          <p className=\"app-title\">Ericson's Fancy Synth</p>\n          <Synth/>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}